package dsl

import laws.DataLaw
import structural.Building

abstract class SensorBasescript extends Script {
	// sensor "name" pin n

	def mode(String s){
		[path: { path ->
			if(path instanceof String){
				((SensorBinding)this.getBinding()).setVariable("mode", s)
				((SensorBinding) this.getBinding()).getSensorModel().generateSensors(s, path)
			}
		}]
	}
	def sensor(String name) {
		[law: { datalaw ->
			[create: { nombre ->
				[building: { b ->
					if (((SensorBinding) this.getBinding()).getVariable("mode").equals("autogenerated")) {
						if (b instanceof Integer) {
							if (!((SensorBinding) this.getBinding()).getSensorModel().containsBuilding(b)) {
								((SensorBinding) this.getBinding()).getSensorModel().createBuilding(b)
							}
							Building building = ((SensorBinding) this.getBinding()).getSensorModel().getBuilding(b)
							DataLaw law = ((SensorBinding) this.getBinding()).getSensorModel().getLaw(datalaw)
							if (nombre instanceof Integer) {
								for (int i = 0; i < nombre; i++) {
									((SensorBinding) this.getBinding()).getSensorModel().createSensor(name, building, law)
								}
							}
						}
					} else {
						throw new Exception("le mode d'extraction ne permet pas de generer des donnÃ©es soi meme");
					}
				}]
			}]
		}]
	}
	// export name

	def law(String type) {
		[type: { DataLaw ->
			((SensorBinding) this.getBinding()).getSensorModel().createLaw(type, DataLaw)
		}]
	}

	def runApp(Integer steps){
		if(steps instanceof Integer) {
			((SensorBinding) this.getBinding()).getSensorModel().runApp(steps)
		}
	}

	/*def export(String name) {
		println(((SensorBinding) this.getBinding()).getSensorModel().generateCode(name).toString())
	}*/
	
	// disable run method while running
	int count = 0
	abstract void scriptBody()
	def run() {
		if(count == 0) {
			count++
			scriptBody()
		} else {
			println "Run method is disabled"
		}
	}
}
